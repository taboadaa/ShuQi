/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3135.0) */

#include "service_if.h"
#include <stdint.h>
#include <stdlib.h>
//#include "app_trace.h"
#include "ble_ias.h" 
#include "ble_stuff_list.h" 

static ble_ias_t m_ias;
static ble_stuff_list_t m_stuff_list;

uint8_t m_stuff_list_stuff_value_initial_value_id_arr[1];

/**@brief Function for handling the Immediate Alert events.
 *
 * @details This function will be called for all Immediate Alert events which are passed to
 *          the application.
 *
 * @param[in]   p_immediate_alert   Immediate Alert structure.
 * @param[in]   p_evt   Event received from the Immediate Alert.
 */
static void on_ias_evt(ble_ias_t * p_ias, ble_ias_evt_t * p_evt) {
	switch (p_evt->evt_type) {
	case BLE_IAS_ALERT_LEVEL_EVT_WRITE:
		//app_trace_log("[Bluetooth_IF]: IAS_ALERT_LEVEL evt WRITE. \r\n");
		break;
	default:
		// No implementation needed.
		break;
	}
}

/**@brief Function for handling the Stuff List events.
 *
 * @details This function will be called for all Stuff List events which are passed to
 *          the application.
 *
 * @param[in]   p_stuff_list   Stuff List structure.
 * @param[in]   p_evt   Event received from the Stuff List.
 */
static void on_stuff_list_evt(ble_stuff_list_t * p_stuff_list,
		ble_stuff_list_evt_t * p_evt) {
	switch (p_evt->evt_type) {
	case BLE_STUFF_LIST_STUFF_ENTRY_EVT_WRITE:
		//app_trace_log("[Bluetooth_IF]: STUFF_LIST_STUFF_ENTRY evt WRITE. \r\n");
		break;
	case BLE_STUFF_LIST_STUFF_READED_EVT_WRITE:
		//app_trace_log("[Bluetooth_IF]: STUFF_LIST_STUFF_READED evt WRITE. \r\n");
		break;
	default:
		// No implementation needed.
		break;
	}
}

/**@brief Function for initializing the Services generated by Bluetooth Developer Studio.
 *
 *
 * @return      NRF_SUCCESS on successful initialization of services, otherwise an error code.
 */
uint32_t bluetooth_init(void) {
	uint32_t err_code;
	ble_ias_init_t ias_init;
	ble_stuff_list_init_t stuff_list_init;

	// Initialize Immediate Alert.
	memset(&ias_init, 0, sizeof(ias_init));

	ias_init.evt_handler = on_ias_evt;
	ias_init.ble_ias_alert_level_initial_value.alert_level.alert_level =
			ALERT_LEVEL_NO_ALERT;

	err_code = ble_ias_init(&m_ias, &ias_init);
	if (err_code != NRF_SUCCESS) {
		return err_code;
	}

	// Initialize Stuff List.
	memset(&stuff_list_init, 0, sizeof(stuff_list_init));

	stuff_list_init.evt_handler = on_stuff_list_evt;
	stuff_list_init.ble_stuff_list_stuff_value_initial_value.id.size = 1;
	stuff_list_init.ble_stuff_list_stuff_value_initial_value.id.p_data =
			m_stuff_list_stuff_value_initial_value_id_arr;
	memset(
			&stuff_list_init.ble_stuff_list_stuff_entry_initial_value.entry_number,
			0x00,
			sizeof(stuff_list_init.ble_stuff_list_stuff_entry_initial_value.entry_number));
	stuff_list_init.ble_stuff_list_stuff_readed_initial_value.all_readed.all_readed =
			ALL_READED_FALSE;
	memset(
			&stuff_list_init.ble_stuff_list_stuff_number_initial_value.entry_number,
			0x00,
			sizeof(stuff_list_init.ble_stuff_list_stuff_number_initial_value.entry_number));

	err_code = ble_stuff_list_init(&m_stuff_list, &stuff_list_init);
	if (err_code != NRF_SUCCESS) {
		return err_code;
	}

	return NRF_SUCCESS;
}

/**@brief Function for handling the Application's BLE Stack events.
 *
 * @details Handles all events from the BLE stack of interest to all Bluetooth Developer Studio generated Services.
 *
 * @param[in]   p_ble_evt  Event received from the BLE stack.
 */
void bluetooth_on_ble_evt(ble_evt_t * p_ble_evt) {
	ble_ias_on_ble_evt(&m_ias, p_ble_evt);
	ble_stuff_list_on_ble_evt(&m_stuff_list, p_ble_evt);
}

//Debug
void debugdebug() {
	ble_stuff_list_stuff_number_t * p_stuff_number = (ble_stuff_list_stuff_number_t *)malloc(sizeof(ble_stuff_list_stuff_number_t));
	p_stuff_number->entry_number = 4;

	ble_stuff_list_stuff_number_set(&m_stuff_list, p_stuff_number);

	free(p_stuff_number);
}

/**
 *
 * @return
 */
uint16_t stuff_list_entry_write() {
	uint16_t result = m_stuff_list.stuff_number_handles
	return result;
}
