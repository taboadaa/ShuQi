/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3135.0) */

#ifndef BLE_STUFF_LIST_H__
#define BLE_STUFF_LIST_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"

/**@brief Stuff List event type. */
typedef enum {
	BLE_STUFF_LIST_STUFF_VALUE_EVT_NOTIFICATION_ENABLED, /**< Stuff Value value notification enabled event. */
	BLE_STUFF_LIST_STUFF_VALUE_EVT_NOTIFICATION_DISABLED, /**< Stuff Value value notification disabled event. */
	BLE_STUFF_LIST_STUFF_ENTRY_EVT_NOTIFICATION_ENABLED, /**< Stuff Entry value notification enabled event. */
	BLE_STUFF_LIST_STUFF_ENTRY_EVT_NOTIFICATION_DISABLED, /**< Stuff Entry value notification disabled event. */
	BLE_STUFF_LIST_STUFF_ENTRY_EVT_WRITE, /**< Stuff Entry write event. */
	BLE_STUFF_LIST_STUFF_READED_EVT_NOTIFICATION_ENABLED, /**< Stuff Readed value notification enabled event. */
	BLE_STUFF_LIST_STUFF_READED_EVT_NOTIFICATION_DISABLED, /**< Stuff Readed value notification disabled event. */
	BLE_STUFF_LIST_STUFF_READED_EVT_WRITE, /**< Stuff Readed write event. */
	BLE_STUFF_LIST_STUFF_NUMBER_EVT_NOTIFICATION_ENABLED, /**< Stuff Number value notification enabled event. */
	BLE_STUFF_LIST_STUFF_NUMBER_EVT_NOTIFICATION_DISABLED, /**< Stuff Number value notification disabled event. */
} ble_stuff_list_evt_type_t;

// Forward declaration of the ble_stuff_list_t type.
typedef struct ble_stuff_list_s ble_stuff_list_t;

typedef enum {
	ALL_READED_FALSE = 0, ALL_READED_TRUE = 1,
} enum_all_readed_t;
typedef struct {
	enum_all_readed_t all_readed;
} stuff_readed_all_readed_t;

/**@brief Stuff Value structure. */
typedef struct {
	uint8_array_t id;
} ble_stuff_list_stuff_value_t;
/**@brief Stuff Entry structure. */
typedef struct {
	uint16_t entry_number;
} ble_stuff_list_stuff_entry_t;
/**@brief Stuff Readed structure. */
typedef struct {
	stuff_readed_all_readed_t all_readed;
} ble_stuff_list_stuff_readed_t;
/**@brief Stuff Number structure. */
typedef struct {
	uint16_t entry_number;
} ble_stuff_list_stuff_number_t;

/**@brief Stuff List Service event. */
typedef struct {
	ble_stuff_list_evt_type_t evt_type; /**< Type of event. */
	union {
		uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
		ble_stuff_list_stuff_entry_t stuff_entry; /**< Holds decoded data in Write event handler. */
		ble_stuff_list_stuff_readed_t stuff_readed; /**< Holds decoded data in Write event handler. */
	} params;
} ble_stuff_list_evt_t;

/**@brief Stuff List Service event handler type. */
typedef void (*ble_stuff_list_evt_handler_t)(ble_stuff_list_t * p_stuff_list,
		ble_stuff_list_evt_t * p_evt);

/**@brief Stuff List Service init structure. This contains all options and data needed for initialization of the service */
typedef struct {
	ble_stuff_list_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Stuff List Service. */
	ble_stuff_list_stuff_value_t ble_stuff_list_stuff_value_initial_value; /**< If not NULL, initial value of the Stuff Value characteristic. */
	ble_stuff_list_stuff_entry_t ble_stuff_list_stuff_entry_initial_value; /**< If not NULL, initial value of the Stuff Entry characteristic. */
	ble_stuff_list_stuff_readed_t ble_stuff_list_stuff_readed_initial_value; /**< If not NULL, initial value of the Stuff Readed characteristic. */
	ble_stuff_list_stuff_number_t ble_stuff_list_stuff_number_initial_value; /**< If not NULL, initial value of the Stuff Number characteristic. */
} ble_stuff_list_init_t;

/**@brief Stuff List Service structure. This contains various status information for the service.*/
struct ble_stuff_list_s {
	ble_stuff_list_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Stuff List Service. */
	uint16_t service_handle; /**< Handle of Stuff List Service (as provided by the BLE stack). */
	ble_gatts_char_handles_t stuff_value_handles; /**< Handles related to the Stuff Value characteristic. */
	ble_gatts_char_handles_t stuff_entry_handles; /**< Handles related to the Stuff Entry characteristic. */
	ble_gatts_char_handles_t stuff_readed_handles; /**< Handles related to the Stuff Readed characteristic. */
	ble_gatts_char_handles_t stuff_number_handles; /**< Handles related to the Stuff Number characteristic. */
	uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Stuff List.
 *
 * @param[out]  p_stuff_list       Stuff List Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_stuff_list_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_stuff_list_init(ble_stuff_list_t * p_stuff_list,
		const ble_stuff_list_init_t * p_stuff_list_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_stuff_list_on_ble_evt(ble_stuff_list_t * p_stuff_list,
		ble_evt_t * p_ble_evt);

/**@brief Function for setting the Stuff Value.
 *
 * @details Sets a new value of the Stuff Value characteristic. The new value will be sent
 *          to the client the next time the client reads the Stuff Value characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_stuff_list                 Stuff List Service structure.
 * @param[in]   p_stuff_value  New Stuff Value.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_stuff_list_stuff_value_set(ble_stuff_list_t * p_stuff_list,
		ble_stuff_list_stuff_value_t * p_stuff_value);

/**@brief Function for setting the Stuff Number.
 *
 * @details Sets a new value of the Stuff Number characteristic. The new value will be sent
 *          to the client the next time the client reads the Stuff Number characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_stuff_list                 Stuff List Service structure.
 * @param[in]   p_stuff_number  New Stuff Number.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_stuff_list_stuff_number_set(ble_stuff_list_t * p_stuff_list,
		ble_stuff_list_stuff_number_t * p_stuff_number);

#endif //_BLE_STUFF_LIST_H__
