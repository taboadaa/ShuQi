/**
 * @name	app.c
 * @authors	Taboada Adrien, Collet Axel
 * @date	2017.05.30
 * @brief	Main application.
 */

#define NRF_LOG_MODULE_NAME "       APP"

#include "app.h"


/**
 * @brief Initialize the application.
 */
void app_init() {
	rfid_ids = calloc(sizeof(uint8_array_t*) * RFID_ID_ARRAY_SIZE, 1);
	rfid_ids_init(rfid_ids);
	currentState = STATE_SLEEP;

	NRF_LOG_INFO("App init\n");
}

/**
 * @brief Change the state of the application.
 */
enum_state_t state_change(enum_state_t currentState, enum_mode_t mode) {
	if(currentState == STATE_SLEEP) {
		if (mode == MODE_READ) {
			return STATE_READ;
		} else if(mode == MODE_RECOGNITION) {
			return STATE_RECOGNITION;
		}
	} else if(currentState == STATE_READ) {
		if(mode == MODE_SLEEP) {
			return STATE_SLEEP;
		}
	} else if(currentState == STATE_RECOGNITION) {
		if(mode == MODE_SLEEP) {
			return STATE_SLEEP;
		}
	}

	//log
	if(currentState == STATE_READ) {
		NRF_LOG_INFO("State READ\n");
	} else if(currentState == STATE_RECOGNITION) {
		NRF_LOG_INFO("State RECOGNITION\n");
	} else {NRF_LOG_INFO("State SLEEP or UNKNOWN\n");}
	//log
	return currentState;
}



/**
 * @brief Function for application main entry.
 */
int main(void) {
	device_init();
	app_init();

	NRF_LOG_INFO("Init complete\n");

	// Enter main loop.
	for (;;) {
		NRF_LOG_INFO("Main operation\n");



		NRF_LOG_INFO("Power manage\n");
		power_manage();
		NRF_LOG_INFO("Exit power manage\n");
	}
}
